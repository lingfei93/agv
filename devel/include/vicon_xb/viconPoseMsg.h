// Generated by gencpp from file vicon_xb/viconPoseMsg.msg
// DO NOT EDIT!


#ifndef VICON_XB_MESSAGE_VICONPOSEMSG_H
#define VICON_XB_MESSAGE_VICONPOSEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vicon_xb
{
template <class ContainerAllocator>
struct viconPoseMsg_
{
  typedef viconPoseMsg_<ContainerAllocator> Type;

  viconPoseMsg_()
    : time_stamp()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , dx(0.0)
    , dy(0.0)
    , dz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  viconPoseMsg_(const ContainerAllocator& _alloc)
    : time_stamp()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , dx(0.0)
    , dy(0.0)
    , dz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _dx_type;
  _dx_type dx;

   typedef float _dy_type;
  _dy_type dy;

   typedef float _dz_type;
  _dz_type dz;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::vicon_xb::viconPoseMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vicon_xb::viconPoseMsg_<ContainerAllocator> const> ConstPtr;

}; // struct viconPoseMsg_

typedef ::vicon_xb::viconPoseMsg_<std::allocator<void> > viconPoseMsg;

typedef boost::shared_ptr< ::vicon_xb::viconPoseMsg > viconPoseMsgPtr;
typedef boost::shared_ptr< ::vicon_xb::viconPoseMsg const> viconPoseMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vicon_xb::viconPoseMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vicon_xb

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vicon_xb': ['/home/eee/lingfei_ws/agv/src/vicon_xb/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vicon_xb::viconPoseMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vicon_xb::viconPoseMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vicon_xb::viconPoseMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f87f226dd5b11ef67fbde47b43eb429e";
  }

  static const char* value(const ::vicon_xb::viconPoseMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf87f226dd5b11ef6ULL;
  static const uint64_t static_value2 = 0x7fbde47b43eb429eULL;
};

template<class ContainerAllocator>
struct DataType< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vicon_xb/viconPoseMsg";
  }

  static const char* value(const ::vicon_xb::viconPoseMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time_stamp\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 dx\n\
float32 dy\n\
float32 dz\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
";
  }

  static const char* value(const ::vicon_xb::viconPoseMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.dz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct viconPoseMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vicon_xb::viconPoseMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vicon_xb::viconPoseMsg_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "dx: ";
    Printer<float>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<float>::stream(s, indent + "  ", v.dy);
    s << indent << "dz: ";
    Printer<float>::stream(s, indent + "  ", v.dz);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VICON_XB_MESSAGE_VICONPOSEMSG_H
